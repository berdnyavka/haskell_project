module Main2 where
import Data.List.Split
import Text.Printf
main :: IO ()
main = do
   src <- readFile "vvod2.txt"
   writeFile "vivod2.txt" (printik (ad (strtod ((splitOn "\n" src) !! 0)) (strtoi ((splitOn "\n" src) !! 2))) ++ "\n" ++ printik(ekstr (strtod ((splitOn "\n" src) !! 1)) (strtoi ((splitOn "\n" src) !! 2)) (strtoi ((splitOn "\n" src) !! 3))))


strtoi :: String -> Int
strtoi x = read x :: Int

strtoD :: String -> Double
strtoD x = read x :: Double

strtod :: String -> [Double]
strtod x = read x :: [Double]

printik :: [Double] -> String
printik x = show x 

round6dp :: Double -> Double
round6dp x = fromIntegral (round $ x * 1e4) / 1e4

ad::[Double] -> Int -> [Double]
ad as count
           | count /= 0 = ad (as ++ [(as !! (length as - 1)) + 1.0]) (count - 1)
           | count == 0 = as
           | otherwise = as

ekstr1 :: [Double] -> Int -> Double
ekstr1 as ch1 = round6dp ((skolsr 0.0 ch1 as ch1)+ ((1.0/(fromIntegral (ch1))) * ((as !! (length as - ch1)) - (as !! (length as - 1)))))


skolsr :: Double -> Int -> [Double] -> Int -> Double
skolsr a b as ch2
                | ch2 /=0 = skolsr(a + (as !! (length as - ch2))) b as (ch2-1) 
                | ch2 == 0 = a/(fromIntegral b)


ekstr ::  [Double] -> Int -> Int -> [Double]
ekstr as count ch 
               | count /= 0 = ekstr (as ++ [ekstr1 as ch]) (count-1) ch
               | count == 0 =  (as ++ [ekstr1 as ch]) 
               | otherwise =  []   
